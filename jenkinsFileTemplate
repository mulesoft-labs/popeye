

currentBuild.displayName = jenkinsbuildnumber + " - " + deployEnv

def buildJob(job, action) {
    successVal = true
    try {
      stage (action + ' ' +  job.artifact_id) {
        echo "deploying" + job.artifact_id
        sleep job.deploy_time
        slackSend channel: "#popeye-notifications", message: action + " " + job.artifact_id

        if(!job.deploy_success) {
            error 'FAIL'
            successVal = false
            slackSend channel: "#popeye-notifications", message: action + " " + job.artifact_id + " FAILED"
        }
      }
    }
    catch (e) {
        currentBuild.result = "FAILURE"
        result = "FAIL"
    }
    if(successVal) {
      try {
        stage (action + ' test ' +  job.artifact_id) {
          echo "Testing" + job.artifact_id
          sleep job.test_time
          if(action == "deploy" && !job.test_success) {
            echo "Stage failed"
            error 'FAIL'
            successVal = false
            slackSend channel: "#popeye-notifications", message: action + " " + job.artifact_id + " FAILED"
          }
        }
      }
      catch (e) {
        currentBuild.result = "FAILURE"
        result = "FAIL"
      }
    }
}


node {
    for (int j = 0; j < jobs.size() && currentBuild.result == null; j++) {
      progress = j
      job = jobs[j]
      buildJob(job, "deploy")
      if(currentBuild.result == "FAILURE") {
        for(int p = j; p >= 0; p--) {
            rollJob = jobs[p]
            buildJob(rollJob, "rollback")
        }
      }
    }

    if(currentBuild.result == "FAILURE") {
      messageCont = "Deployment for ticket " + jenkinsbuildnumber + " FAILED"
      slackSend channel: "#popeye-notifications", message: action + " " + job.artifact_id + " FAILED"
    }

}
