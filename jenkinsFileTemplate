

currentBuild.displayName = jenkinsbuildnumber + " - " + deployEnv
deploy_region = "us-east-1"
deploy_env = "sandbox"
account = "sandbox"


def tfdeploy() {
        terraformDeploy(
          region:             deploy_region,
          environment:        deploy_env,
          account:            deploy_env,
          terraform_version:  "0.11.1",
          use_docker:         true
        )
}

def buildJob(job, action) {
    successVal = true
    try {
      stage (action + ' ' +  job.artifact_id) {
        echo action + " " + job.name
        sleep job.deploy_time
        tfdeploy()
        if(!job.deploy_success) {
            error 'FAIL'
            successVal = false
            messageCont = ":x:FAILED " + action + " for: " + job.artifact_id + " into env: " + deployEnv
            slackSend channel: "#popeye-notifications", message: messageCont
        }
        else {
          messageCont = ":peach:Succesful " + action + " for: " + job.artifact_id + "into env: " + deployEnv
          slackSend channel: "#popeye-notifications", message: messageCont
        }
      }
    }
    catch (e) {
        currentBuild.result = "FAILURE"
        result = "FAIL"
    }
    if(successVal) {
      try {
        stage (action + ' test ' +  job.artifact_id) {
          echo "Testing" + job.artifact_id
          sleep job.test_time
          if(action == "deploy" && !job.test_success) {
            echo "Stage failed"
            error 'FAIL'
            successVal = false
            messageCont = ":x:FAILED " + action + " test for: " + job.artifact_id + " into env: " + deployEnv
            slackSend channel: "#popeye-notifications", message: messageCont
          }
          else {
            messageCont = ":strawberry:Succesful " + action + " test for: " + job.artifact_id + "into env: " + deployEnv
            slackSend channel: "#popeye-notifications", message: messageCont
          }
        }
      }
      catch (e) {
        currentBuild.result = "FAILURE"
        result = "FAIL"
      }
    }
}


node {
    for (int j = 0; j < jobs.size() && currentBuild.result == null; j++) {
      progress = j
      job = jobs[j]
      buildJob(job, "deploy")
      if(currentBuild.result == "FAILURE") {
        for(int p = j; p >= 0; p--) {
            rollJob = jobs[p]
            buildJob(rollJob, "rollback")
        }
      }
    }

    if(currentBuild.result == "FAILURE") {
      messageCont = ":x:Failed deployment for ticket " + jenkinsbuildnumber + " into env: " + deployEnv
      slackSend channel: "#popeye-notifications", message: messageCont
    }
    else {
      messageCont = ":heart:Successful deployment for: " + jenkinsbuildnumber + " into env: " + deployEnv
      slackSend channel: "#popeye-notifications", message: messageCont
    }

}
