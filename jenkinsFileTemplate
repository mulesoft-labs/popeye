

currentBuild.displayName = jenkinsbuildnumber + " - " + deployEnv

def buildJob(job, action) {
    successVal = true
    try {
      stage (action + ' ' +  job.artifact_id) {
        echo "deploying" + job.artifact_id
        //sleep job.deploy_time
        deployBuild = job.deployBuild
        //node {
          echo "About to build external deploy job: " + deployBuild
          build job: deployBuild
          echo "Ran external deploy job: " + deployBuild
        //}

        if(!job.deploy_success) {
            error 'FAIL'
            successVal = false
            messageCont = ":x:FAILED " + action + " for: " + job.artifact_id + " into env: " + deployEnv
            slackSend channel: "#popeye-notifications", message: messageCont
        }
        else {
          messageCont = ":peach:Succesful " + action + " for: " + job.artifact_id + " into env: " + deployEnv
          slackSend channel: "#popeye-notifications", message: messageCont
        }
      }
    }
    catch (e) {
        echo "EXCEPTION with deployment " + deployEnv
        error 'FAIL'
        successVal = false
        currentBuild.result = "FAILURE"
        result = "FAIL"
        messageCont = ":x:FAILED " + action + " for: " + job.artifact_id + " into env: " + deployEnv
        slackSend channel: "#popeye-notifications", message: messageCont
    }
    if(successVal) {
      try {
        stage (action + ' test ' +  job.artifact_id) {
          echo "Testing" + job.artifact_id
          smokeBuild = job.smokeBuild
          //node {
            echo "About to run external smoke test job: " + smokeBuild
            build job: smokeBuild
            echo "Ran external smoke test job: " + smokeBuild
          //}
          //sleep job.test_time
          if(action == "deploy" && !job.test_success) {
            echo "Stage failed"
            error 'FAIL'
            successVal = false
            messageCont = ":x:FAILED " + action + " test for: " + job.artifact_id + " into env: " + deployEnv
            slackSend channel: "#popeye-notifications", message: messageCont
          }
          else {
            messageCont = ":strawberry:Succesful " + action + " test for: " + job.artifact_id + " into env: " + deployEnv
            slackSend channel: "#popeye-notifications", message: messageCont
          }
        }
      }
      catch (e) {
        echo "EXCEPTION with test " + deployEnv
        currentBuild.result = "FAILURE"
        result = "FAIL"
      }
    }
}


node {
    for (int j = 0; j < jobs.size() && currentBuild.result == null; j++) {
      progress = j
      job = jobs[j]
      buildJob(job, "deploy")
      if(currentBuild.result == "FAILURE") {
        for(int p = j; p >= 0; p--) {
            rollJob = jobs[p]
            buildJob(rollJob, "rollback")
        }
      }
    }
//}

//node {
    if(currentBuild.result == "FAILURE") {
      messageCont = ":x:Failed deployment for ticket " + jenkinsbuildnumber + " into env: " + deployEnv
      slackSend channel: "#popeye-notifications", message: messageCont
    }
    else {
      try {
        jiraURL = "http://ec2-174-129-177-255.compute-1.amazonaws.com:8080/mbis/" + jenkinsbuildnumber + "/nextStage"
        repsonse = httpRequest url: jiraURL, httpMode: 'PUT'
      }
      catch(e) {
        echo "Unable to update Jira"
      }
      messageCont = ":heart:Successful deployment for: " + jenkinsbuildnumber + " into env: " + deployEnv
      slackSend channel: "#popeye-notifications", message: messageCont
    }

}
